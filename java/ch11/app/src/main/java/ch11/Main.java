/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ch11;

import ch11.animal.structure.Animal;
import ch11.animal.structure.AnimalShelter;
import ch11.queue.structure.Queue;
import ch11.stack.strucrure.Stack;

public class Main {
  public static void main(String[] args) {
//    System.out.println("Y\nA");
//    System.out.println("-------------------------<<STACK>>-------------------------------");
//    stack();
//    System.out.println("-------------------------<<QUEUE>>-------------------------------");
//    queue();
//    System.out.println("------------------------------------------------------------");

    AnimalShelter animalShelter =new AnimalShelter();
    animalShelter.enqueue("first");
    animalShelter.enqueue("dog");
    animalShelter.enqueue("cat");
    animalShelter.enqueue("last");
    System.out.println(animalShelter.dequeue("cat"));
    System.out.println(animalShelter.dequeue("cat"));

    System.out.println(animalShelter.peek());
  }


  public static void stack() {

    //FILO
    // we did PUSH (add) to stack, POP(remove), and PEEK(look at the current top Node).

    Stack stack = new Stack();

    stack.push("Y");
    stack.push("A");
    stack.push("Z");
    stack.push("A");
    stack.push("N");

    System.out.println("The top of the stack is => " + stack.peek());

    System.out.println(stack.pop()); // N comes off

    System.out.println("The top of the stack is => " + stack.peek()); // is O

    System.out.println(stack.pop()); // pop A
    System.out.println(stack.pop()); // pop Z
    System.out.println(stack.pop()); // pop A
    System.out.println(stack.pop()); // pop Y
    System.out.println(stack.pop()); // stack empty
  }

  private static void queue() {

    //FIFO
    // we did EnQueue (add) to the end, DeQueue(remove) from the first, and PEEK(look at the current first value).

    Queue queue = new Queue();


    queue.enqueue("Y");
    queue.enqueue("A");
    queue.enqueue("Z");
    queue.enqueue("A");
    queue.enqueue("N");


    System.out.println(queue.dequeue()); // prints Y
    System.out.println(queue.dequeue()); // prints A
    System.out.println(queue.dequeue()); // prints Z
    System.out.println("The front of the Queue is => " + queue.peek()); // prints A
    System.out.println(queue.dequeue()); // prints A
    System.out.println(queue.dequeue()); // prints N
    System.out.println(queue.dequeue()); // prints the queue is empty



  }
}
