/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hastable;


import tree.BinaryTree;

import tree.TreeIntersection;
import tree.TreeNode;

import java.util.Arrays;
import java.util.HashMap;

public class App {


  public static void main(String[] args) {
    HashTable hashTable = new HashTable();
    hashTable.add("John", 300);
    hashTable.add("sanaa", 400);
    hashTable.add("Tom", 200);
    hashTable.add("Jade", 100);
    hashTable.add("Doa", 600);
    hashTable.add("Farah", 700);
    hashTable.add("Jason", 90000);
    hashTable.add("Morgan", 800);
    hashTable.add("Naim", 1000);
    hashTable.add("Qusai", 1500);
    hashTable.add("Deyaa", 10000);


//      String str="Once upon a time, there was a brave princess who...";
//      System.out.println("The Integer is => " + hashTable.find("Jade"));
//      System.out.println("The index is => " + hashTable.getHash("Morgan"));
//      System.out.println("Is contain ? => " + hashTable.contains("abrar"));
//      System.out.println("Is contain ? => " + hashTable.contains("Jason"));
//      System.out.println(hashTable.repeatedWord("It was a queer, sultry summer, " +
//        "the summer they electrocuted the Rosenbergs, and I didnâ€™t know what I was doing in New York..."));


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    BinaryTree<Integer> binaryTreeOne = new BinaryTree<>(new TreeNode<>(5));
    TreeNode<Integer> node1 = new TreeNode<>(2);
    TreeNode<Integer> node2 = new TreeNode<>(3);
    TreeNode<Integer> node3 = new TreeNode<>(1, node1, node2);
    TreeNode<Integer> node5 = new TreeNode<>(6);
    TreeNode<Integer> node4 = new TreeNode<>(4, node5, null);
    binaryTreeOne.root.rightChild = node4;
    binaryTreeOne.root.leftChild = node3;

    BinaryTree<Integer> binaryTreeTwo = new BinaryTree<>(new TreeNode<>(45));
    TreeNode<Integer> node6 = new TreeNode<>(2);
    TreeNode<Integer> node7 = new TreeNode<>(12);
    TreeNode<Integer> node8 = new TreeNode<>(1, node6, node7);
    TreeNode<Integer> node9 = new TreeNode<>(44);
    TreeNode<Integer> node10 = new TreeNode<>(4, node9, null);
    binaryTreeTwo.root.rightChild = node10;
    binaryTreeTwo.root.leftChild = node8;

    System.out.println(TreeIntersection.treeIntersection(binaryTreeOne, binaryTreeTwo));

///////////////////////////////////////////////////////////////////////////////////////////////////////////
    HashMap<String, String> h1 = new HashMap<>();
    h1.put("fond", "enamored");
    h1.put("wrath", "anger");
    h1.put("diligent", "employed");
    h1.put("outfit", "garb");
    h1.put("guide", "usher");

    HashMap<String, String> h2 = new HashMap<>();
    h2.put("fond", "averse");
    h2.put("wrath", "delight");
    h2.put("diligent", "idle");
    h2.put("guide", "follow");
    h2.put("flow", "jam");

    HashMap<String, String[]> h3 = new HashMap<>();
    h3 = LeftJoin.leftJoin(h1, h2);
//    System.out.println(Arrays.toString(h3.get("fond")));
//    System.out.println(Arrays.toString(h3.get("wrath")));
//    System.out.println(Arrays.toString(h3.get("fond")));
//    System.out.println(Arrays.toString(h3.get("fond")));
//    System.out.println(Arrays.toString(h3.get("fond")));
  }
}
